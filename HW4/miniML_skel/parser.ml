type token =
  | NUM of (int)
  | TRUE
  | FALSE
  | ID of (string)
  | ASSIGN
  | INT
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | EQUAL
  | EQUALEQUAL
  | LE
  | LT
  | GE
  | GT
  | NOT
  | AND
  | OR
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | READ
  | PRINT
  | SEMICOLON
  | LET
  | IN
  | COMMA
  | ISZERO
  | LETREC
  | PROC
  | NEWREF
  | DEREF
  | SETREF
  | BEGIN
  | END
  | LBRACE
  | RBRACE
  | LBLOCK
  | RBLOCK
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

# 53 "parser.ml"
let yytransl_const = [|
  258 (* TRUE *);
  259 (* FALSE *);
  261 (* ASSIGN *);
  262 (* INT *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* STAR *);
  266 (* SLASH *);
  267 (* EQUAL *);
  268 (* EQUALEQUAL *);
  269 (* LE *);
  270 (* LT *);
  271 (* GE *);
  272 (* GT *);
  273 (* NOT *);
  274 (* AND *);
  275 (* OR *);
  276 (* IF *);
  277 (* THEN *);
  278 (* ELSE *);
  279 (* WHILE *);
  280 (* DO *);
  281 (* READ *);
  282 (* PRINT *);
  283 (* SEMICOLON *);
  284 (* LET *);
  285 (* IN *);
  286 (* COMMA *);
  287 (* ISZERO *);
  288 (* LETREC *);
  289 (* PROC *);
  290 (* NEWREF *);
  291 (* DEREF *);
  292 (* SETREF *);
  293 (* BEGIN *);
  294 (* END *);
  295 (* LBRACE *);
  296 (* RBRACE *);
  297 (* LBLOCK *);
  298 (* RBLOCK *);
  299 (* LPAREN *);
  300 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  260 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\006\000\006\000\009\000\016\000\005\000\004\000\
\004\000\004\000\003\000\003\000\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\003\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\018\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000"

let yysindex = "\003\000\
\009\255\000\000\000\000\000\000\009\255\000\000\254\254\009\255\
\002\255\220\254\225\254\227\254\009\255\009\255\000\000\160\001\
\225\255\004\255\233\255\229\254\015\255\009\255\009\255\160\255\
\074\255\009\255\009\255\009\255\009\255\009\255\009\255\009\255\
\009\255\000\000\009\255\009\255\028\255\245\254\114\255\122\255\
\000\000\000\000\137\255\233\255\048\255\048\255\000\255\000\255\
\233\255\057\255\082\255\011\002\194\255\247\254\009\255\000\000\
\000\000\000\000\009\255\009\255\025\255\233\255\233\255\233\255\
\009\255\168\255\034\255\009\255\005\255\233\255\041\255\003\255\
\038\255\009\255\202\255\009\255\233\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\220\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\255\000\077\000\115\000\001\000\039\000\
\037\001\150\000\185\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\075\001\113\001\157\001\
\000\000\000\000\000\000\000\000\000\000\192\001\000\000\000\000\
\000\000\000\000\000\000\000\000\227\001"

let yygindex = "\000\000\
\000\000\251\255"

let yytablesize = 806
let yytable = "\017\000\
\006\000\018\000\019\000\001\000\026\000\020\000\021\000\024\000\
\025\000\003\000\031\000\022\000\004\000\023\000\036\000\037\000\
\039\000\040\000\038\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\005\000\052\000\053\000\054\000\
\055\000\006\000\061\000\065\000\007\000\069\000\007\000\008\000\
\009\000\010\000\011\000\012\000\072\000\013\000\073\000\071\000\
\074\000\062\000\000\000\014\000\026\000\063\000\064\000\000\000\
\029\000\030\000\031\000\066\000\000\000\026\000\070\000\027\000\
\028\000\029\000\030\000\031\000\075\000\000\000\077\000\000\000\
\000\000\000\000\003\000\000\000\004\000\004\000\026\000\000\000\
\027\000\028\000\029\000\030\000\031\000\000\000\026\000\032\000\
\027\000\028\000\029\000\030\000\031\000\005\000\000\000\032\000\
\000\000\000\000\006\000\000\000\033\000\007\000\000\000\000\000\
\008\000\009\000\010\000\011\000\012\000\000\000\013\000\000\000\
\000\000\000\000\005\000\000\000\014\000\042\000\026\000\000\000\
\027\000\028\000\029\000\030\000\031\000\000\000\026\000\032\000\
\027\000\028\000\029\000\030\000\031\000\000\000\000\000\032\000\
\000\000\000\000\000\000\000\000\033\000\026\000\000\000\027\000\
\028\000\029\000\030\000\031\000\033\000\009\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\000\000\000\000\033\000\026\000\057\000\027\000\028\000\
\029\000\030\000\031\000\000\000\026\000\032\000\027\000\028\000\
\029\000\030\000\031\000\000\000\058\000\032\000\000\000\000\000\
\020\000\067\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\068\000\041\000\026\000\000\000\
\027\000\028\000\029\000\030\000\031\000\000\000\026\000\032\000\
\027\000\028\000\029\000\030\000\031\000\000\000\000\000\032\000\
\000\000\000\000\000\000\010\000\033\000\000\000\060\000\000\000\
\000\000\000\000\000\000\000\000\033\000\026\000\076\000\027\000\
\028\000\029\000\030\000\031\000\000\000\026\000\032\000\027\000\
\028\000\029\000\030\000\031\000\000\000\035\000\032\000\000\000\
\000\000\000\000\000\000\033\000\000\000\000\000\019\000\000\000\
\000\000\006\000\000\000\033\000\006\000\000\000\000\000\006\000\
\006\000\006\000\006\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\006\000\000\000\006\000\006\000\006\000\000\000\
\000\000\006\000\000\000\006\000\006\000\006\000\000\000\006\000\
\006\000\006\000\006\000\006\000\008\000\006\000\006\000\007\000\
\000\000\000\000\007\000\006\000\006\000\007\000\007\000\007\000\
\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\007\000\000\000\007\000\007\000\007\000\000\000\000\000\007\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\015\000\007\000\007\000\004\000\000\000\000\000\
\004\000\007\000\007\000\004\000\004\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\
\004\000\004\000\004\000\000\000\000\000\004\000\000\000\004\000\
\004\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\
\011\000\004\000\004\000\005\000\000\000\000\000\005\000\004\000\
\004\000\005\000\005\000\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000\005\000\000\000\005\000\005\000\
\005\000\000\000\000\000\005\000\000\000\005\000\005\000\005\000\
\000\000\005\000\005\000\005\000\005\000\005\000\009\000\005\000\
\005\000\009\000\000\000\000\000\012\000\005\000\005\000\034\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\009\000\
\000\000\009\000\009\000\009\000\000\000\000\000\009\000\000\000\
\009\000\009\000\009\000\000\000\009\000\009\000\009\000\009\000\
\009\000\020\000\009\000\009\000\020\000\000\000\000\000\013\000\
\009\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\000\000\020\000\020\000\020\000\000\000\
\000\000\020\000\000\000\020\000\020\000\020\000\000\000\020\000\
\020\000\020\000\020\000\020\000\010\000\020\000\020\000\010\000\
\000\000\000\000\014\000\020\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\010\000\
\010\000\010\000\000\000\000\000\010\000\000\000\000\000\010\000\
\010\000\000\000\010\000\010\000\010\000\010\000\010\000\019\000\
\010\000\010\000\019\000\000\000\000\000\000\000\010\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\019\000\019\000\019\000\000\000\000\000\019\000\
\000\000\000\000\019\000\019\000\000\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\008\000\000\000\000\000\
\008\000\019\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\008\000\008\000\008\000\000\000\000\000\008\000\000\000\000\000\
\008\000\008\000\000\000\008\000\008\000\008\000\008\000\008\000\
\000\000\008\000\008\000\015\000\000\000\000\000\015\000\008\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\000\000\015\000\015\000\
\015\000\000\000\000\000\015\000\000\000\000\000\015\000\015\000\
\000\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
\015\000\011\000\000\000\000\000\011\000\015\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\000\000\011\000\011\000\011\000\000\000\
\000\000\011\000\000\000\000\000\011\000\011\000\000\000\011\000\
\011\000\011\000\011\000\011\000\000\000\011\000\011\000\000\000\
\000\000\000\000\000\000\011\000\011\000\012\000\000\000\000\000\
\012\000\000\000\000\000\000\000\026\000\000\000\027\000\028\000\
\029\000\030\000\031\000\000\000\000\000\032\000\012\000\000\000\
\012\000\012\000\012\000\000\000\000\000\012\000\000\000\000\000\
\012\000\012\000\033\000\012\000\012\000\012\000\012\000\012\000\
\013\000\012\000\012\000\013\000\000\000\000\000\000\000\012\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\013\000\013\000\013\000\000\000\000\000\
\013\000\000\000\000\000\013\000\013\000\000\000\013\000\013\000\
\013\000\013\000\013\000\014\000\013\000\013\000\014\000\000\000\
\000\000\000\000\013\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\014\000\014\000\
\014\000\000\000\000\000\014\000\000\000\000\000\014\000\014\000\
\000\000\014\000\014\000\014\000\014\000\014\000\000\000\014\000\
\014\000\000\000\000\000\000\000\000\000\014\000\014\000\026\000\
\000\000\027\000\028\000\029\000\030\000\031\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\000\000\000\000\000\000\000\000\000\033\000"

let yycheck = "\005\000\
\000\000\004\001\008\000\001\000\005\001\004\001\043\001\013\000\
\014\000\001\001\011\001\043\001\004\001\043\001\011\001\043\001\
\022\000\023\000\004\001\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\020\001\035\000\036\000\004\001\
\044\001\025\001\044\001\011\001\028\001\004\001\000\000\031\001\
\032\001\033\001\034\001\035\001\004\001\037\001\044\001\043\001\
\011\001\055\000\255\255\043\001\005\001\059\000\060\000\255\255\
\009\001\010\001\011\001\065\000\255\255\005\001\068\000\007\001\
\008\001\009\001\010\001\011\001\074\000\255\255\076\000\255\255\
\255\255\255\255\001\001\255\255\000\000\004\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\005\001\014\001\
\007\001\008\001\009\001\010\001\011\001\020\001\255\255\014\001\
\255\255\255\255\025\001\255\255\027\001\028\001\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\255\255\037\001\255\255\
\255\255\255\255\000\000\255\255\043\001\044\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\005\001\014\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\014\001\
\255\255\255\255\255\255\255\255\027\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\027\001\000\000\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\255\255\
\255\255\255\255\255\255\027\001\005\001\044\001\007\001\008\001\
\009\001\010\001\011\001\255\255\005\001\014\001\007\001\008\001\
\009\001\010\001\011\001\255\255\044\001\014\001\255\255\255\255\
\000\000\018\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\255\255\029\001\038\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\005\001\014\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\014\001\
\255\255\255\255\255\255\000\000\027\001\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\027\001\005\001\029\001\007\001\
\008\001\009\001\010\001\011\001\255\255\005\001\014\001\007\001\
\008\001\009\001\010\001\011\001\255\255\021\001\014\001\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\000\000\255\255\
\255\255\001\001\255\255\027\001\004\001\255\255\255\255\007\001\
\008\001\009\001\010\001\255\255\255\255\255\255\014\001\255\255\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\255\255\027\001\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\000\000\037\001\038\001\001\001\
\255\255\255\255\004\001\043\001\044\001\007\001\008\001\009\001\
\010\001\255\255\255\255\255\255\014\001\255\255\255\255\255\255\
\018\001\255\255\020\001\021\001\022\001\255\255\255\255\025\001\
\255\255\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\000\000\037\001\038\001\001\001\255\255\255\255\
\004\001\043\001\044\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\014\001\255\255\255\255\255\255\018\001\255\255\
\020\001\021\001\022\001\255\255\255\255\025\001\255\255\027\001\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\000\000\037\001\038\001\001\001\255\255\255\255\004\001\043\001\
\044\001\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\014\001\255\255\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\255\255\027\001\028\001\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\001\001\037\001\
\038\001\004\001\255\255\255\255\000\000\043\001\044\001\000\000\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\255\255\020\001\021\001\022\001\255\255\255\255\025\001\255\255\
\027\001\028\001\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\001\001\037\001\038\001\004\001\255\255\255\255\000\000\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\255\255\027\001\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\001\001\037\001\038\001\004\001\
\255\255\255\255\000\000\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\018\001\255\255\020\001\
\021\001\022\001\255\255\255\255\025\001\255\255\255\255\028\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\001\001\
\037\001\038\001\004\001\255\255\255\255\255\255\043\001\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\020\001\021\001\022\001\255\255\255\255\025\001\
\255\255\255\255\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\255\255\037\001\038\001\001\001\255\255\255\255\
\004\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\020\001\021\001\022\001\255\255\255\255\025\001\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\255\255\037\001\038\001\001\001\255\255\255\255\004\001\043\001\
\044\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\255\255\255\255\028\001\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\255\255\037\001\
\038\001\001\001\255\255\255\255\004\001\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\255\255\037\001\038\001\255\255\
\255\255\255\255\255\255\043\001\044\001\001\001\255\255\255\255\
\004\001\255\255\255\255\255\255\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\018\001\255\255\
\020\001\021\001\022\001\255\255\255\255\025\001\255\255\255\255\
\028\001\029\001\027\001\031\001\032\001\033\001\034\001\035\001\
\001\001\037\001\038\001\004\001\255\255\255\255\255\255\043\001\
\044\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\018\001\255\255\020\001\021\001\022\001\255\255\255\255\
\025\001\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\001\001\037\001\038\001\004\001\255\255\
\255\255\255\255\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\255\255\255\255\028\001\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\255\255\037\001\
\038\001\255\255\255\255\255\255\255\255\043\001\044\001\005\001\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\027\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  ASSIGN\000\
  INT\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  EQUAL\000\
  EQUALEQUAL\000\
  LE\000\
  LT\000\
  GE\000\
  GT\000\
  NOT\000\
  AND\000\
  OR\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  READ\000\
  PRINT\000\
  SEMICOLON\000\
  LET\000\
  IN\000\
  COMMA\000\
  ISZERO\000\
  LETREC\000\
  PROC\000\
  NEWREF\000\
  DEREF\000\
  SETREF\000\
  BEGIN\000\
  END\000\
  LBRACE\000\
  RBRACE\000\
  LBLOCK\000\
  RBLOCK\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 27 "parser.mly"
            ( _1 )
# 422 "parser.ml"
               : Lang.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 31 "parser.mly"
        ( Lang.CONST _1 )
# 429 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 32 "parser.mly"
       ( Lang.VAR _1 )
# 436 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 33 "parser.mly"
                  ( Lang.ADD (_1,_3) )
# 444 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 34 "parser.mly"
                   ( Lang.SUB (_1,_3) )
# 452 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 35 "parser.mly"
                  ( Lang.MUL (_1,_3) )
# 460 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 36 "parser.mly"
                   ( Lang.DIV (_1,_3) )
# 468 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 37 "parser.mly"
                  ( Lang.EQ (_1,_3) )
# 476 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 38 "parser.mly"
               ( Lang.LT (_1,_3) )
# 484 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 39 "parser.mly"
               ( Lang.ISZERO _2 )
# 491 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 40 "parser.mly"
                             ( Lang.IF (_2,_4,_6) )
# 500 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 41 "parser.mly"
                            ( Lang.LET (_2,_4,_6) )
# 509 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 42 "parser.mly"
                                                ( Lang.LETREC (_2,_4,_7,_9) )
# 519 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 14 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 9 : 'exp) in
    let _9 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _11 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _14 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _16 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 43 "parser.mly"
                                                                                 ( 
			Lang.LETMREC (_2,_4,_7,_9,_11,_14,_16) 
		)
# 534 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 46 "parser.mly"
                              ( Lang.PROC (_3,_5) )
# 542 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 47 "parser.mly"
                          ( Lang.CALL (_2,_3) )
# 550 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 48 "parser.mly"
                             ( Lang.NEWREF _3 )
# 557 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 49 "parser.mly"
                            ( Lang.DEREF _3 )
# 564 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 50 "parser.mly"
                    ( Lang.SETREF (_1, _3) )
# 572 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 51 "parser.mly"
                       ( Lang.SEQ (_1, _3) )
# 580 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 52 "parser.mly"
                      ( _2 )
# 587 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
         ( Lang.READ )
# 593 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 54 "parser.mly"
                  ( Lang.BEGIN _2 )
# 600 "parser.ml"
               : 'exp))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lang.program)
;;
# 56 "parser.mly"

let parse_error s = print_endline s
# 628 "parser.ml"
